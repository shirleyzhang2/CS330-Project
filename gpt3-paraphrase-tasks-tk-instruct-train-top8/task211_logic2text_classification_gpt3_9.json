{
    "Contributors": [
        "Mihir Parmar"
    ],
    "Source": [
        "logic2text"
    ],
    "URL": [
        "https://github.com/czyssrs/Logic2Text"
    ],
    "Categories": [
        "Text to Code"
    ],
    "Reasoning": [
        "Logical Reasoning"
    ],
    "Definition": [
        "In this task, you are given commands (in terms of logical operations) and natural interpretation of the given command to select relevant rows from the given table. Your job is to generate a label \"yes\" if the interpretation is appropriate for the command, otherwise generate label \"no\". Here are the definitions of the logical operators: 1. count: returns the number of rows in the view. 2. only: returns whether there is exactly one row in the view. 3. hop: returns the value under the header column of the row. 4. and: returns the boolean operation result of two arguments. 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. 7. argmax/argmin: returns the row with the max/min value in header column. 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. 9. eq/not_eq: returns if the two arguments are equal. 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. 11. greater/less: returns if the first argument is greater/less than the second argument. 12. diff: returns the difference between two arguments. 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. 16. filter_all: returns the view itself for the case of describing the whole table 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument."
    ],
    "Input_language": [
        "English"
    ],
    "Output_language": [
        "English"
    ],
    "Instruction_language": [
        "English"
    ],
    "Domains": [
        "Wikipedia",
        "Logic -> Propositional Logic"
    ],
    "Positive Examples": [
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 3 } ; competition } ; danish superliga 2005 - 06 }, interpretation: select the row whose attendance record of all rows is 3rd maximum. the competition record of this row is danish superliga 2005-06.",
            "output": "yes",
            "explanation": "Here, the command and interpretion given for the command is correct that 3rd maximum should be selected from given table rows. Hence, the label is 'yes'."
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; duration } ; actor } ; lesley saweard }, interpretation: select the row whose duration record of all rows is maximum. the actor record of this row is lesley saweard.",
            "output": "yes",
            "explanation": "Here, the command and interpretion given for the command is correct that the maximum duration should be selected from the given table rows. Hence, the label is 'yes'."
        },
        {
            "input": "Command: most_eq { all_rows ; points ; 0 }, interpretation: select the row whose duration record of all rows is maximum. the actor record of this row is lesley saweard.",
            "output": "no",
            "explanation": "Here, the command and interpretion given for the command is not correct because command indicates that the most of the point records are zero, however, interetation indicates that the maximum duration should be selected from the given table rows. Hence, the label is 'no'."
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; acquisition via ; rookie draft } } ; eq { hop { filter_eq { all_rows ; acquisition via ; rookie draft } ; name } ; reynel hugnatan } }, interpretation: select the row whose attendance record of all rows is 3rd maximum. the competition record of this row is danish superliga 2005-06.",
            "output": "no",
            "explanation": "Here, the command and interpretion given for the command is not correct because command selects only one row whose acquisition record fuzzily matches to rookie draft, however, interpretation indicates that 3rd maximum should be selected from given table rows. Hence, the label is 'no'."
        }
    ],
    "Negative Examples": [
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 3 } ; competition } ; danish superliga 2005 - 06 }, interpretation: select the row whose attendance record of all rows is 3rd maximum. the competition record of this row is danish superliga 2005-06.",
            "output": "no",
            "explanation": "Given command and corresponding natural language interpretation is right, still label is 'no'. It must be 'yes'."
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; goal gain ; 3 } ; team } ; south china }, interpretation: select the rows whose name of county record fuzzily matches to veszpr\u00e9m. take the area (km square) record of this row. select the rows whose name of county record fuzzily matches to tolna.",
            "output": "yes",
            "explanation": "Given command and corresponding natural language interpretation is completely mis-matched, still label is 'yes'. It must be 'no'."
        }
    ],
    "Instances": [
        {
            "id": "task211-0d13a25f88c445c79143f164f531cd31",
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; player ; kenny solomon } ; td 's } ; hop { filter_eq { all_rows ; player ; chris ryan } ; td 's } } ; 2 }, interpretation: select the rows whose player record fuzzily matches to kenny solomon . take the td 's record of this row . select the rows whose player record fuzzily matches to chris ryan . take the td 's record of this row . the first record is 2 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "id": "task211-07b3f3b3cccc4271bd614c87000350f6",
            "input": "Command: eq { max { filter_eq { all_rows ; district ; fregenal de la sierra } ; election date } ; 1853 - 2 - 4 }, interpretation: for the class records of all rows , all of them fuzzily match to d .",
            "output": [
                "no"
            ]
        },
        {
            "id": "task211-e3bd5948ba5d4d8a9d52905556cb37f5",
            "input": "Command: and { less { hop { filter_eq { all_rows ; year ; 1961 } ; rank } ; hop { filter_eq { all_rows ; year ; 1970 } ; rank } } ; and { eq { hop { filter_eq { all_rows ; year ; 1961 } ; rank } ; 17 } ; eq { hop { filter_eq { all_rows ; year ; 1970 } ; rank } ; 22 } } }, interpretation: select the rows whose year record fuzzily matches to 1961 . take the rank record of this row . select the rows whose year record fuzzily matches to 1970 . take the rank record of this row . the first record is less than the second record . the rank record of the first row is 17 . the rank record of the second row is 22 .",
            "output": [
                "yes"
            ]
        },
        {
            "id": "task211-44832b30d77a4b6cbf846a9063aad602",
            "input": "Command: less { hop { filter_eq { all_rows ; opponent ; iowa } ; date } ; hop { filter_eq { all_rows ; opponent ; 4 michigan } ; date } }, interpretation: select the rows whose opponent record fuzzily matches to iowa . take the date record of this row . select the rows whose opponent record fuzzily matches to 4 michigan . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "id": "task211-a19884321fa44215a4cac2010e1367ad",
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; object type ; spiral galaxy } ; apparent magnitude ; 13.0 } } ; 2 }, interpretation: select the rows whose object type record fuzzily matches to spiral galaxy . among these rows , select the rows whose apparent magnitude record is equal to 13.0 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "id": "task211-5bf003ebfe0447a8810f89e2acb2658a",
            "input": "Command: eq { hop { nth_argmax { all_rows ; ratings ; 1 } ; broadcast date } ; 14 august 2012 }, interpretation: select the row whose us viewers ( millions ) record of all rows is maximum . the original air date record of this row is november 7 , 2010 .",
            "output": [
                "no"
            ]
        },
        {
            "id": "task211-e95a5657488543d886289a3b96e6e825",
            "input": "Command: round_eq { avg { all_rows ; 2001 - 02 } ; 2907 }, interpretation: the average of the 2001 - 02 record of all rows is 2907 .",
            "output": [
                "yes"
            ]
        },
        {
            "id": "task211-12060c00746c4c1bb0c1bd58d4cd6464",
            "input": "Command: most_eq { all_rows ; to par ; 7 }, interpretation: select the row whose rank record of all rows is minimum . the year record of this row is 2012 .",
            "output": [
                "no"
            ]
        }
    ],
    "Instance License": [
        "MIT"
    ]
}