{
    "Contributors": [
        "Mihir Parmar"
    ],
    "Source": [
        "logic2text"
    ],
    "URL": [
        "https://github.com/czyssrs/Logic2Text"
    ],
    "Categories": [
        "Text to Code"
    ],
    "Reasoning": [
        "Logical Reasoning"
    ],
    "Definition": [
        "In this task, you are given commands (in terms of logical operations) and a natural interpretation of the given command to select relevant rows from the given table. Your job is to generate a label \"yes\" if the interpretation is appropriate for the command, otherwise generate label \"no\". Here are the definitions of logical operators: 1. count: returns the number of rows in the view. 2. only: returns whether there is exactly one row in the view. 3. hop: returns the value under the header column of the row. 4. and: returns the boolean operation result of two arguments. 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. 7. argmax/argmin: returns the row with the max/min value in header column. 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. 9. eq/not_eq: returns if the two arguments are equal. 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. 11. greater/less: returns if the first argument is greater/less than the second argument. 12. diff: returns the difference between two arguments. 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. 16. filter_all: returns the view itself for the case of describing the whole table 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument."
    ],
    "Input_language": [
        "English"
    ],
    "Output_language": [
        "English"
    ],
    "Instruction_language": [
        "English"
    ],
    "Domains": [
        "Wikipedia",
        "Logic -> Propositional Logic"
    ],
    "Positive Examples": [
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 3 } ; competition } ; danish superliga 2005 - 06 }, interpretation: select the row whose attendance record of all rows is 3rd maximum. the competition record of this row is danish superliga 2005-06.",
            "output": "yes",
            "explanation": "Here, the command and interpretion given for the command is correct that 3rd maximum should be selected from given table rows. Hence, the label is 'yes'."
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; duration } ; actor } ; lesley saweard }, interpretation: select the row whose duration record of all rows is maximum. the actor record of this row is lesley saweard.",
            "output": "yes",
            "explanation": "Here, the command and interpretion given for the command is correct that the maximum duration should be selected from the given table rows. Hence, the label is 'yes'."
        },
        {
            "input": "Command: most_eq { all_rows ; points ; 0 }, interpretation: select the row whose duration record of all rows is maximum. the actor record of this row is lesley saweard.",
            "output": "no",
            "explanation": "Here, the command and interpretion given for the command is not correct because command indicates that the most of the point records are zero, however, interetation indicates that the maximum duration should be selected from the given table rows. Hence, the label is 'no'."
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; acquisition via ; rookie draft } } ; eq { hop { filter_eq { all_rows ; acquisition via ; rookie draft } ; name } ; reynel hugnatan } }, interpretation: select the row whose attendance record of all rows is 3rd maximum. the competition record of this row is danish superliga 2005-06.",
            "output": "no",
            "explanation": "Here, the command and interpretion given for the command is not correct because command selects only one row whose acquisition record fuzzily matches to rookie draft, however, interpretation indicates that 3rd maximum should be selected from given table rows. Hence, the label is 'no'."
        }
    ],
    "Negative Examples": [
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 3 } ; competition } ; danish superliga 2005 - 06 }, interpretation: select the row whose attendance record of all rows is 3rd maximum. the competition record of this row is danish superliga 2005-06.",
            "output": "no",
            "explanation": "Given command and corresponding natural language interpretation is right, still label is 'no'. It must be 'yes'."
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; goal gain ; 3 } ; team } ; south china }, interpretation: select the rows whose name of county record fuzzily matches to veszpr\u00e9m. take the area (km square) record of this row. select the rows whose name of county record fuzzily matches to tolna.",
            "output": "yes",
            "explanation": "Given command and corresponding natural language interpretation is completely mis-matched, still label is 'yes'. It must be 'no'."
        }
    ],
    "Instances": [
        {
            "id": "task211-7929c51fe1264fa4b6a3b7f5724e8634",
            "input": "Command: eq { count { filter_eq { all_rows ; state ; new york } } ; 3 }, interpretation: select the rows whose state record fuzzily matches to new york . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "id": "task211-6e39633d20154f6fa05b40182ca96bb1",
            "input": "Command: and { only { filter_eq { all_rows ; directed by ; guy bee } } ; eq { hop { filter_eq { all_rows ; directed by ; guy bee } ; title } ; family matters } }, interpretation: select the rows whose directed by record fuzzily matches to guy bee . there is only one such row in the table . the title record of this unqiue row is family matters .",
            "output": [
                "yes"
            ]
        },
        {
            "id": "task211-683b0fc44468452b881f700277f58a40",
            "input": "Command: and { only { filter_eq { all_rows ; score ; 2 - 0 } } ; eq { hop { filter_eq { all_rows ; score ; 2 - 0 } ; home team } ; eastern team a } }, interpretation: select the rows whose score record fuzzily matches to 2 - 0 . there is only one such row in the table . the home team record of this unqiue row is eastern team a .",
            "output": [
                "yes"
            ]
        },
        {
            "id": "task211-fae208fdc8c3405d82ba22ed68424edb",
            "input": "Command: and { only { filter_less { all_rows ; rushing yards ; 1000 } } ; eq { hop { filter_less { all_rows ; rushing yards ; 1000 } ; year } ; 1989 } }, interpretation: select the rows whose rushing yards record is less than 1000 . there is only one such row in the table . the year record of this unqiue row is 1989 .",
            "output": [
                "yes"
            ]
        },
        {
            "id": "task211-b1f1b2d1147b47cea7d6d29769c8bf95",
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; attendance ; 70000 } ; tv time ; fox } } ; 2 }, interpretation: for the type records of all rows , all of them fuzzily match to sovereign .",
            "output": [
                "no"
            ]
        },
        {
            "id": "task211-c10369233f234f528a4173914f8cba4c",
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; 2013 date ; may } ; local name ; \u043f\u0440\u0430\u0437\u043d\u0438\u043a \u0440\u0430\u0434\u0430 , praznik rada } } ; 2 }, interpretation: the average of the weight record of all rows is 88 .",
            "output": [
                "no"
            ]
        },
        {
            "id": "task211-606992f15ea24ec6bc47a602aa2fe129",
            "input": "Command: and { greater { hop { filter_eq { all_rows ; project ; \u00f6zhan canayd\u0131n project } ; capacity } ; hop { filter_eq { all_rows ; project ; faruk s\u00fcren project } ; capacity } } ; and { eq { hop { filter_eq { all_rows ; project ; \u00f6zhan canayd\u0131n project } ; capacity } ; 52652 } ; eq { hop { filter_eq { all_rows ; project ; faruk s\u00fcren project } ; capacity } ; 40482 } } }, interpretation: for the killed records of all rows , most of them are greater than 13 .",
            "output": [
                "no"
            ]
        },
        {
            "id": "task211-c14ed5610d3b415799b513b88182d54b",
            "input": "Command: and { only { filter_eq { all_rows ; rebounds per game ; 3.4 } } ; eq { hop { filter_eq { all_rows ; rebounds per game ; 3.4 } ; tournament } ; 2011 eurobasket } }, interpretation: select the rows whose rebounds per game record is equal to 3.4 . there is only one such row in the table . the tournament record of this unqiue row is 2011 eurobasket .",
            "output": [
                "yes"
            ]
        }
    ],
    "Instance License": [
        "MIT"
    ]
}