{
    "Contributors": [
        "Mihir Parmar"
    ],
    "Source": [
        "logic2text"
    ],
    "URL": [
        "https://github.com/czyssrs/Logic2Text"
    ],
    "Categories": [
        "Text to Code"
    ],
    "Reasoning": [
        "Logical Reasoning"
    ],
    "Definition": [
        "In this task, you are given a command in terms of logical operations and a natural interpretation of the command. Your job is to determine if the interpretation is appropriate for the command. If it is, label the interpretation \"yes\". If it is not, label it \"no\". The logical operators are defined as follows: 1. count: returns the number of rows in the view. 2. only: returns whether there is exactly one row in the view. 3. hop: returns the value under the header column of the row. 4. and: returns the boolean operation result of two arguments. 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. 7. argmax/argmin: returns the row with the max/min value in header column. 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. 9. eq/not_eq: returns if the two arguments are equal. 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. 11. greater/less: returns if the first argument is greater/less than the second argument. 12. diff: returns the difference between two arguments. 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. 16. filter_all: returns the view itself for the case of describing the whole table 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument."
    ],
    "Input_language": [
        "English"
    ],
    "Output_language": [
        "English"
    ],
    "Instruction_language": [
        "English"
    ],
    "Domains": [
        "Wikipedia",
        "Logic -> Propositional Logic"
    ],
    "Positive Examples": [
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 3 } ; competition } ; danish superliga 2005 - 06 }, interpretation: select the row whose attendance record of all rows is 3rd maximum. the competition record of this row is danish superliga 2005-06.",
            "output": "yes",
            "explanation": "Here, the command and interpretion given for the command is correct that 3rd maximum should be selected from given table rows. Hence, the label is 'yes'."
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; duration } ; actor } ; lesley saweard }, interpretation: select the row whose duration record of all rows is maximum. the actor record of this row is lesley saweard.",
            "output": "yes",
            "explanation": "Here, the command and interpretion given for the command is correct that the maximum duration should be selected from the given table rows. Hence, the label is 'yes'."
        },
        {
            "input": "Command: most_eq { all_rows ; points ; 0 }, interpretation: select the row whose duration record of all rows is maximum. the actor record of this row is lesley saweard.",
            "output": "no",
            "explanation": "Here, the command and interpretion given for the command is not correct because command indicates that the most of the point records are zero, however, interetation indicates that the maximum duration should be selected from the given table rows. Hence, the label is 'no'."
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; acquisition via ; rookie draft } } ; eq { hop { filter_eq { all_rows ; acquisition via ; rookie draft } ; name } ; reynel hugnatan } }, interpretation: select the row whose attendance record of all rows is 3rd maximum. the competition record of this row is danish superliga 2005-06.",
            "output": "no",
            "explanation": "Here, the command and interpretion given for the command is not correct because command selects only one row whose acquisition record fuzzily matches to rookie draft, however, interpretation indicates that 3rd maximum should be selected from given table rows. Hence, the label is 'no'."
        }
    ],
    "Negative Examples": [
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 3 } ; competition } ; danish superliga 2005 - 06 }, interpretation: select the row whose attendance record of all rows is 3rd maximum. the competition record of this row is danish superliga 2005-06.",
            "output": "no",
            "explanation": "Given command and corresponding natural language interpretation is right, still label is 'no'. It must be 'yes'."
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; goal gain ; 3 } ; team } ; south china }, interpretation: select the rows whose name of county record fuzzily matches to veszpr\u00e9m. take the area (km square) record of this row. select the rows whose name of county record fuzzily matches to tolna.",
            "output": "yes",
            "explanation": "Given command and corresponding natural language interpretation is completely mis-matched, still label is 'yes'. It must be 'no'."
        }
    ],
    "Instances": [
        {
            "id": "task211-0d7697e7c7244671bfff9ada09acf0fc",
            "input": "Command: and { only { filter_eq { all_rows ; earpads ; circumaural bowl } } ; eq { hop { filter_eq { all_rows ; earpads ; circumaural bowl } ; headphone model } ; gs1000i } }, interpretation: the sum of the top - 25 record of all rows is 48 .",
            "output": [
                "no"
            ]
        },
        {
            "id": "task211-e77e5f4d04ac41fba4c676f5b53c97ab",
            "input": "Command: and { only { filter_less { all_rows ; blank ends ; 10 } } ; eq { hop { filter_less { all_rows ; blank ends ; 10 } ; skip } ; johnny frederiksen } }, interpretation: select the rows whose blank ends record is less than 10 . there is only one such row in the table . the skip record of this unqiue row is johnny frederiksen .",
            "output": [
                "yes"
            ]
        },
        {
            "id": "task211-85b1b6e2642d4a40b0d9c25032bdad02",
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; outgoing manager ; ra\u015fit \u00e7etiner } ; date of vacancy } ; hop { filter_eq { all_rows ; outgoing manager ; engin ipeko\u011flu } ; date of vacancy } } ; -8 days }, interpretation: select the rows whose player record fuzzily matches to frederick l conklin . take the touchdowns record of this row . select the rows whose player record fuzzily matches to jimmy craig . take the touchdowns record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "id": "task211-0444f317f53243788f56777f57260360",
            "input": "Command: only { filter_eq { all_rows ; rider ; suzuki } }, interpretation: select the rows whose rider record fuzzily matches to suzuki . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "id": "task211-58226aab172b4348adcfbe6b62193862",
            "input": "Command: eq { count { filter_eq { all_rows ; hometown ; ca } } ; 2 }, interpretation: select the rows whose surface record fuzzily matches to carpet ( i ) . there is only one such row in the table . the tournament record of this unqiue row is wolfsburg , germany .",
            "output": [
                "no"
            ]
        },
        {
            "id": "task211-e0ad2ab6d5364ba09dd5916a835c94d1",
            "input": "Command: round_eq { avg { all_rows ; races } ; 12 }, interpretation: the average of the races record of all rows is 12 .",
            "output": [
                "yes"
            ]
        },
        {
            "id": "task211-d17906f3a32e4c49a1949c440d45b06c",
            "input": "Command: eq { count { filter_all { all_rows ; position } } ; 13 }, interpretation: select the rows whose position record is arbitrary . the number of such rows is 13 .",
            "output": [
                "yes"
            ]
        },
        {
            "id": "task211-12fdba453c494801864a7d278eb2f998",
            "input": "Command: most_eq { all_rows ; owner ; greentrains }, interpretation: for the owner records of all rows , most of them fuzzily match to greentrains .",
            "output": [
                "yes"
            ]
        }
    ],
    "Instance License": [
        "MIT"
    ]
}